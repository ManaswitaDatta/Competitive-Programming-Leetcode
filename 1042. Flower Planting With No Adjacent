class Solution {
    public int[] gardenNoAdj(int N, int[][] paths) {
        int[] output = new int[N];
        int[] flowerAdded = new int[4];
        Map<Integer, List<Integer>> allPaths = new HashMap<>();
        for(int i = 0; i < paths.length; i++){
            int x = paths[i][0];
            int y = paths[i][1];
            List<Integer> newList = new ArrayList<>();
            if(allPaths.containsKey(x))
                newList = allPaths.get(x);
            newList.add(y);
            allPaths.put(x, newList);
            newList = new ArrayList<>();
            if(allPaths.containsKey(y))
                newList = allPaths.get(y);
            newList.add(x);
            allPaths.put(y, newList);
        }
        for(Map.Entry<Integer, List<Integer>> entry: allPaths.entrySet()){
            int key = entry.getKey();
            if(output[key-1] == 0){
                List<Integer> newList = entry.getValue();
            Arrays.fill(flowerAdded, 0);
            for(int x: newList){
                if(output[x-1] != 0)
                    flowerAdded[output[x-1] - 1] = 1;
            }
            for(int i = 0; i < 4; i++)
                if(flowerAdded[i] == 0){
                    output[key-1] = i+1;
                    flowerAdded[i] = 1;
                    break;
                }   
            }
        }
        for(int i = 0; i < N; i++)
            if(output[i] == 0){
                output[i] = 1;   
            }
        return output;
    }
}
