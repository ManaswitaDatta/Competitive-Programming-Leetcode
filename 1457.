class Solution {
    int count = 0;
    private void palindrome(int[]  freq){
        int x = 0;
        for(int i = 0; i < 10; i++)
            x += freq[i] % 2;
        if(x < 2) count++;
    }
    private void find(TreeNode root, int[] freq){
        if(root == null) return;
        freq[root.val - 1]++;
        if(root.left == null && root.right == null) {
            palindrome(freq);
            return;
        }
        if(root.left != null){
            find(root.left, freq);  freq[root.left.val-1]--;
        }
        if(root.right != null){
            find(root.right, freq);  freq[root.right.val-1]--;
        }
        
    }
    public int pseudoPalindromicPaths (TreeNode root) {
        int[] freqPath = new int[10]; // 0 - 9 freq for each path
        find(root, freqPath);
        return count;
    }
}
