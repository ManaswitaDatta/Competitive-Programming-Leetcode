/**
 * Definition for a binary tree node.
 * public class TreeNode {
 *     int val;
 *     TreeNode left;
 *     TreeNode right;
 *     TreeNode() {}
 *     TreeNode(int val) { this.val = val; }
 *     TreeNode(int val, TreeNode left, TreeNode right) {
 *         this.val = val;
 *         this.left = left;
 *         this.right = right;
 *     }
 * }
 */
class Solution {
    int min = Integer.MAX_VALUE;
    private int findclosestleft(TreeNode root){
        if(root.right == null) return root.val;
        while(root.right != null)
            root = root.right;
        return root.val;
    }
    private int findclosestright(TreeNode root){
        if(root.left == null) return root.val;
        while(root.left != null)
            root = root.left;
        return root.val;
    }
    private void preorder(TreeNode root){
        if(root == null) return;
        if(root.left != null)
            min = Math.min(min, root.val - findclosestleft(root.left));
        if(root.right != null)
            min = Math.min(min, findclosestright(root.right) - root.val);
        preorder(root.left);
        preorder(root.right);
    }
    public int minDiffInBST(TreeNode root) {
        preorder(root);
        return min;
    }
}
