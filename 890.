class Solution {
    private boolean convert(char[] str, String pat){
        char[] index = new char[26];
        Arrays.fill(index,'\0');
        boolean[] visited = new boolean[26];
        int n = str.length;
        char[] result = new char[n];
        for(int i = 0; i < n; i++){
            int j = str[i] - 'a';
            if(index[j] == '\0'){
                if(visited[pat.charAt(i) - 'a'] == false){
                    index[j] = pat.charAt(i);
                    visited[pat.charAt(i) - 'a'] = true;
                } 
                    
                else return false;
            }
            result[i] = index[str[i] - 'a'];
        }
        return (String.valueOf(result)).equals(pat);
    }
    public List<String> findAndReplacePattern(String[] words, String pattern) {
        List<String> result = new ArrayList<>();
        int n = pattern.length();
        for(String x : words){
            if(convert(x.toCharArray(), pattern))
                result.add(x);
        }
        return result;
    }
}
