class Solution {
    private static final int MOD = 1000000007;
    private boolean isPrime(int n){
        if(n == 2) return true;
        if(n == 1 || n % 2 == 0) return false;
        for(int i = 3; i <= Math.sqrt(n); i+=2)
            if(n % i == 0) return false;
        return true;
    }
    private long fact(int n){
        long f = 1;
        while(n > 0){
            f = (f*n)%MOD;
            n--;
        }
        return f;
    }
    public int numPrimeArrangements(int n) {
        int prime = 0, nonPrime = 0;
        for(int i = 1; i <= n; i++)
            if(isPrime(i))
                prime++;
        nonPrime = n - prime;
        return (int)((fact(prime)*fact(nonPrime))%MOD);
    }
}
